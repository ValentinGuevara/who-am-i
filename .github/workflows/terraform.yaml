name: "Terraform Pipeline with GitHub Actions"

on:
  push:
    branches:
      - main
    paths:
      - .github/**
      - iac/**
  pull_request:
    branches:
      - main
      - feat/**
    paths:
      - .github/**
      - iac/**

permissions:
  id-token: write
  contents: read

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: "Terraform Infrastructure Update"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./iac

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            iac
          sparse-checkout-cone-mode: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-3
          role-session-name: iam-github-assume-session
          role-to-assume: arn:aws:iam::637423508544:role/github_oidc_role

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Terraform init
        id: init
        run: terraform init"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
